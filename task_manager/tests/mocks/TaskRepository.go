// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task_manager/Domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: c, newTask
func (_m *TaskRepository) AddTask(c context.Context, newTask domain.Task) (domain.Task, error) {
	ret := _m.Called(c, newTask)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) (domain.Task, error)); ok {
		return rf(c, newTask)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Task) domain.Task); ok {
		r0 = rf(c, newTask)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Task) error); ok {
		r1 = rf(c, newTask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: c, taskID
func (_m *TaskRepository) DeleteTask(c context.Context, taskID int) error {
	ret := _m.Called(c, taskID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(c, taskID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: c
func (_m *TaskRepository) GetAllTasks(c context.Context) ([]*domain.Task, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []*domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]*domain.Task, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []*domain.Task); ok {
		r0 = rf(c)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllUserTasks provides a mock function with given fields: c, username
func (_m *TaskRepository) GetAllUserTasks(c context.Context, username string) ([]*domain.Task, error) {
	ret := _m.Called(c, username)

	if len(ret) == 0 {
		panic("no return value specified for GetAllUserTasks")
	}

	var r0 []*domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*domain.Task, error)); ok {
		return rf(c, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*domain.Task); ok {
		r0 = rf(c, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNewID provides a mock function with given fields: c
func (_m *TaskRepository) GetNewID(c context.Context) (int, error) {
	ret := _m.Called(c)

	if len(ret) == 0 {
		panic("no return value specified for GetNewID")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(c)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(c)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(c)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: c, taskID
func (_m *TaskRepository) GetTask(c context.Context, taskID int) (domain.Task, error) {
	ret := _m.Called(c, taskID)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.Task, error)); ok {
		return rf(c, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.Task); ok {
		r0 = rf(c, taskID)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(c, taskID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByIDForUser provides a mock function with given fields: c, taskID, username
func (_m *TaskRepository) GetTaskByIDForUser(c context.Context, taskID int, username string) (domain.Task, error) {
	ret := _m.Called(c, taskID, username)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByIDForUser")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, string) (domain.Task, error)); ok {
		return rf(c, taskID, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, string) domain.Task); ok {
		r0 = rf(c, taskID, username)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, string) error); ok {
		r1 = rf(c, taskID, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: c, taskID, updatedTask
func (_m *TaskRepository) UpdateTask(c context.Context, taskID int, updatedTask domain.Task) (domain.Task, error) {
	ret := _m.Called(c, taskID, updatedTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.Task) (domain.Task, error)); ok {
		return rf(c, taskID, updatedTask)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, domain.Task) domain.Task); ok {
		r0 = rf(c, taskID, updatedTask)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, domain.Task) error); ok {
		r1 = rf(c, taskID, updatedTask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
