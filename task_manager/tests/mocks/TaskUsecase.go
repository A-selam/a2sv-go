// Code generated by mockery v2.53.4. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "task_manager/Domain"

	mock "github.com/stretchr/testify/mock"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// AddTask provides a mock function with given fields: c, username, task
func (_m *TaskUsecase) AddTask(c context.Context, username string, task domain.Task) (domain.Task, error) {
	ret := _m.Called(c, username, task)

	if len(ret) == 0 {
		panic("no return value specified for AddTask")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Task) (domain.Task, error)); ok {
		return rf(c, username, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, domain.Task) domain.Task); ok {
		r0 = rf(c, username, task)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, domain.Task) error); ok {
		r1 = rf(c, username, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: c, id, username, role
func (_m *TaskUsecase) DeleteTask(c context.Context, id string, username string, role string) error {
	ret := _m.Called(c, id, username, role)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(c, id, username, role)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTasks provides a mock function with given fields: c, username, role
func (_m *TaskUsecase) GetAllTasks(c context.Context, username string, role string) ([]*domain.Task, error) {
	ret := _m.Called(c, username, role)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []*domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ([]*domain.Task, error)); ok {
		return rf(c, username, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) []*domain.Task); ok {
		r0 = rf(c, username, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(c, username, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTask provides a mock function with given fields: c, taskID, username, role
func (_m *TaskUsecase) GetTask(c context.Context, taskID string, username string, role string) (domain.Task, error) {
	ret := _m.Called(c, taskID, username, role)

	if len(ret) == 0 {
		panic("no return value specified for GetTask")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (domain.Task, error)); ok {
		return rf(c, taskID, username, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) domain.Task); ok {
		r0 = rf(c, taskID, username, role)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(c, taskID, username, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: c, taskId, username, role, updatedTask
func (_m *TaskUsecase) UpdateTask(c context.Context, taskId string, username string, role string, updatedTask domain.Task) (domain.Task, error) {
	ret := _m.Called(c, taskId, username, role, updatedTask)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 domain.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, domain.Task) (domain.Task, error)); ok {
		return rf(c, taskId, username, role, updatedTask)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, domain.Task) domain.Task); ok {
		r0 = rf(c, taskId, username, role, updatedTask)
	} else {
		r0 = ret.Get(0).(domain.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, domain.Task) error); ok {
		r1 = rf(c, taskId, username, role, updatedTask)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
